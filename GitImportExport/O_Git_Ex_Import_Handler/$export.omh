Do lLibs.$define(lLibName,lLibPath)
Do lLibs.$merge($libs.$makelist($ref.$name,$ref.$pathname))

If pExportCore<>pExportPlugins
	Do lLibs.$search($ref.[lLibName.$name]='core',kTrue,kFalse,kTrue,kTrue)
	If pExportCore
		Do lLibs.$remove(kListKeepSelected)
	Else
		Do lLibs.$remove(kListDeleteSelected)
	End If
End If

Do lLibs.$search(pos(con(',',upp($ref.[lLibName.$name]),','),con(',',upp(C_EXCLUDE_LIBS),','))>0,kTrue,kFalse,kTrue,kTrue)
Do lLibs.$remove(kListDeleteSelected)

Do $cinst.$defineErrorMaster(lMasterErrors)
Do $cinst.$defineErrorMaster(lMasterWarnings)

For l1 from 1 to lLibs.$linecount step 1
	Calculate lLibName as lLibs(lLibName.$name,l1)
	Calculate lLibPath as lLibs(lLibPath.$name,l1)
	Calculate lGitPath as con(mid(lLibPath,1,rpos('.',lLibPath)-1),'.git')
	Do FileOps.$doesfileexist(lGitPath) Returns lStatus
	If not(lStatus)
		Do FileOps.$createdir(lGitPath) Returns lStatus
	End If
	Do $root.$exportjson($libs.[lLibName],lGitPath,lErrors,lWarnings) Returns lStatus
	If not(lStatus)
		Calculate lFailedLibs as con(lFailedLibs,lLibName,',')
	End If
	
	Do lMasterErrors.$merge($cinst.$mergeExporetIssues(lErrors))
	Do lMasterWarnings.$merge($cinst.$mergeExporetIssues(lWarnings))
End For

If not(isclear(lFailedLibs))
	OK message Fehler beim Exportieren (Icon,Sound bell) {Folgende Libraries konnten nicht exportiert werden: [lFailedLibs]}
Else
	OK message Export erfolgreich (Icon,Sound bell) {Alle Ã„nderungen wurden erfolgreich exportiert.}
End If

Do $cinst.$showIssuesOverview(lMasterErrors,lMasterWarnings)